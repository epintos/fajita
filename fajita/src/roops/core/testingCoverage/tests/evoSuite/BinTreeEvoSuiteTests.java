/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 31 20:56:22 ART 2014
 */

package roops.core.testingCoverage.tests.evoSuite;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotSame;

import org.junit.Test;

import roops.core.testingCoverage.base.BinTreeNode;
import roops.core.testingCoverage.path.BinTreeRemove;
import ar.uba.dc.rfm.tools.TestCoverageTool;

public class BinTreeEvoSuiteTests {

	// Test case number: 0
	/*
	 * 2 covered goals: 1
	 * roops.core.testingCoverage.core.BinTreeRemove.repOK_isAcyclic()Z: I83
	 * Branch 39 IFEQ L334 - false 2
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .containsTest(Lroops/core/testingCoverage/core/BinTreeRemove;I)V: I6
	 * Branch 4 IFEQ L33 - true
	 */

	@Test
	public void test00() throws Throwable {
		BinTreeRemove binTree0 = new BinTreeRemove();
		BinTreeNode binTreeNode0 = new BinTreeNode();
		BinTreeRemove binTree1 = new BinTreeRemove();
		BinTreeRemove binTree2 = new BinTreeRemove();
		binTree2.root = binTreeNode0;
		binTree2.root.left = binTree2.root;
		BinTreeRemove.removeTest(binTree1, binTree2.root);
		binTree2.root.left = binTree0.root;
		binTree2.root.right = binTree1.root;
		BinTreeRemove.containsTest(binTree1, 0);
		assertNotSame(binTree1, binTree2);
		TestCoverageTool.pathReport(binTree0);
		TestCoverageTool.pathReport(binTree1);
		TestCoverageTool.pathReport(binTree2);
	}

	// Test case number: 1
	/*
	 * 3 covered goals: 1
	 * roops.core.testingCoverage.core.BinTreeRemove.repOK_isAcyclic()Z: I76
	 * Branch 38 IFNULL L332 - false 2
	 * roops.core.testingCoverage.core.BinTreeRemove.repOK_isAcyclic()Z: I83
	 * Branch 39 IFEQ L334 - true 3
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .repOK_isOrderedMax(Lroops/core/testingCoverage/base/BinTreeNode;)I: I16
	 * Branch 48 IFNONNULL L376 - true
	 */

	@Test
	public void test01() throws Throwable {
		BinTreeRemove binTree0 = new BinTreeRemove();
		BinTreeRemove binTree1 = new BinTreeRemove();
		BinTreeRemove.addTest(binTree1, (-2044));
		BinTreeRemove.addTest(binTree0, 795);
		binTree1.root.right = binTree0.root;
		BinTreeRemove.addTest(binTree1, 0);
		assertNotSame(binTree1, binTree0);
		TestCoverageTool.pathReport(binTree0);
		TestCoverageTool.pathReport(binTree1);
	}

	// Test case number: 2
	/*
	 * 3 covered goals: 1
	 * roops.core.testingCoverage.core.BinTreeRemove.repOK_isOrderedMin
	 * (Lroops/core/testingCoverage/base/BinTreeNode;)I: I16 Branch 47 IFNONNULL
	 * L368 - true 2
	 * roops.core.testingCoverage.core.BinTreeRemove.remove(Lroops
	 * /core/testingCoverage
	 * /base/BinTreeNode;)Lroops/core/testingCoverage/base/BinTreeNode;: I86
	 * Branch 24 IFNONNULL L231 - false 3
	 * roops.core.testingCoverage.core.BinTreeRemove.repOK_isAcyclic()Z: I53
	 * Branch 37 IFEQ L325 - true
	 */

	@Test
	public void test02() throws Throwable {
		BinTreeRemove binTree0 = new BinTreeRemove();
		BinTreeNode binTreeNode0 = new BinTreeNode();
		binTree0.root = binTreeNode0;
		BinTreeRemove binTree1 = new BinTreeRemove();
		BinTreeRemove binTree2 = new BinTreeRemove();
		BinTreeNode binTreeNode1 = new BinTreeNode();
		binTree2.root = binTreeNode1;
		binTree2.root.left = binTree2.root;
		BinTreeRemove.removeTest(binTree1, binTree2.root);
		binTree2.root.left = binTree0.root;
		BinTreeRemove.addTest(binTree1, 0);
		assertNotSame(binTree1, binTree0);
		TestCoverageTool.pathReport(binTree0);
		TestCoverageTool.pathReport(binTree1);
		TestCoverageTool.pathReport(binTree2);
	}

	// Test case number: 3
	/*
	 * 4 covered goals: 1
	 * roops.core.testingCoverage.core.BinTreeRemove.addTest
	 * (Lroops/core/testingCoverage/core/BinTreeRemove;I)V: I6 Branch 2 IFEQ
	 * L25 - true 2 roops.core.testingCoverage.core.BinTreeRemove.repOK()Z: I9
	 * Branch 28 IFNE L277 - false 3
	 * roops.core.testingCoverage.core.BinTreeRemove.repOK_isAcyclic()Z: I46
	 * Branch 36 IFNULL L323 - false 4
	 * roops.core.testingCoverage.core.BinTreeRemove.repOK_isAcyclic()Z: I53
	 * Branch 37 IFEQ L325 - false
	 */

	@Test
	public void test03() throws Throwable {
		BinTreeRemove binTree0 = new BinTreeRemove();
		BinTreeNode binTreeNode0 = new BinTreeNode();
		binTree0.root = binTreeNode0;
		BinTreeRemove binTree1 = new BinTreeRemove();
		binTree1.root = binTree0.root;
		binTree1.root.left = binTree1.root;
		BinTreeRemove.addTest(binTree1, 0);
		assertNotSame(binTree1, binTree0);
		TestCoverageTool.pathReport(binTree0);
		TestCoverageTool.pathReport(binTree1);
	}

	// Test case number: 4
	/*
	 * 5 covered goals: 1
	 * roops.core.testingCoverage.core.BinTreeRemove.remove(
	 * Lroops/core/testingCoverage
	 * /base/BinTreeNode;)Lroops/core/testingCoverage/base/BinTreeNode;: I8
	 * Branch 20 IFNULL L199 - false 2
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .remove(Lroops/core/testingCoverage
	 * /base/BinTreeNode;)Lroops/core/testingCoverage/base/BinTreeNode;: I11
	 * Branch 21 IFNONNULL L199 - false 3
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .remove(Lroops/core/testingCoverage
	 * /base/BinTreeNode;)Lroops/core/testingCoverage/base/BinTreeNode;: I43
	 * Branch 22 IFNULL L212 - false 4
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .remove(Lroops/core/testingCoverage
	 * /base/BinTreeNode;)Lroops/core/testingCoverage/base/BinTreeNode;: I70
	 * Branch 23 IFNULL L224 - false 5
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .remove(Lroops/core/testingCoverage
	 * /base/BinTreeNode;)Lroops/core/testingCoverage/base/BinTreeNode;: I111
	 * Branch 25 IF_ACMPNE L240 - false
	 */

	@Test
	public void test04() throws Throwable {
		BinTreeRemove binTree0 = new BinTreeRemove();
		BinTreeRemove binTree1 = new BinTreeRemove();
		BinTreeNode binTreeNode0 = new BinTreeNode();
		binTree0.root = binTreeNode0;
		binTree0.root.parent = binTreeNode0;
		binTreeNode0.left = binTree0.root.parent;
		BinTreeRemove.removeTest(binTree1, binTree0.root.parent);
		assertNotSame(binTree1, binTree0);
		TestCoverageTool.pathReport(binTree0);
		TestCoverageTool.pathReport(binTree1);
	}

	// Test case number: 5
	/*
	 * 7 covered goals: 1
	 * roops.core.testingCoverage.core.BinTreeRemove.removeTest
	 * (Lroops/core/testingCoverage
	 * /core/BinTreeRemove;Lroops/core/testingCoverage/base/BinTreeNode;)V: I8
	 * Branch 7 IFEQ L41 - false 2
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .remove(Lroops/core/testingCoverage
	 * /base/BinTreeNode;)Lroops/core/testingCoverage/base/BinTreeNode;: I8
	 * Branch 20 IFNULL L199 - true 3
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .remove(Lroops/core/testingCoverage
	 * /base/BinTreeNode;)Lroops/core/testingCoverage/base/BinTreeNode;: I43
	 * Branch 22 IFNULL L212 - true 4
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .remove(Lroops/core/testingCoverage
	 * /base/BinTreeNode;)Lroops/core/testingCoverage/base/BinTreeNode;: I70
	 * Branch 23 IFNULL L224 - true 5
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .remove(Lroops/core/testingCoverage
	 * /base/BinTreeNode;)Lroops/core/testingCoverage/base/BinTreeNode;: I86
	 * Branch 24 IFNONNULL L231 - true 6
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .remove(Lroops/core/testingCoverage
	 * /base/BinTreeNode;)Lroops/core/testingCoverage/base/BinTreeNode;: I111
	 * Branch 25 IF_ACMPNE L240 - true 7
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .remove(Lroops/core/testingCoverage
	 * /base/BinTreeNode;)Lroops/core/testingCoverage/base/BinTreeNode;: I141
	 * Branch 26 IF_ACMPEQ L253 - true
	 */

	@Test
	public void test05() throws Throwable {
		BinTreeRemove binTree0 = new BinTreeRemove();
		BinTreeRemove binTree1 = new BinTreeRemove();
		BinTreeNode binTreeNode0 = new BinTreeNode();
		binTree0.root = binTreeNode0;
		binTree0.root.parent = binTreeNode0;
		BinTreeRemove.removeTest(binTree1, binTreeNode0);
		assertEquals(0, binTreeNode0.key);
		TestCoverageTool.pathReport(binTree0);
		TestCoverageTool.pathReport(binTree1);
	}

	// Test case number: 6
	/*
	 * 17 covered goals: 1
	 * roops.core.testingCoverage.core.BinTreeRemove.repOK_isOrdered
	 * (Lroops/core/testingCoverage/base/BinTreeNode;)Z: root-Branch 2
	 * roops.core
	 * .testingCoverage.core.BinTreeRemove.initNode(Lroops/core/testingCoverage
	 * /base/BinTreeNode;I)V: root-Branch 3
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .repOK_isOrderedMin(Lroops/core/testingCoverage/base/BinTreeNode;)I: I16
	 * Branch 47 IFNONNULL L368 - false 4
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .addTest(Lroops/core/testingCoverage/core/BinTreeRemove;I)V: I3 Branch
	 * 1 IFNULL L25 - false 5
	 * roops.core.testingCoverage.core.BinTreeRemove.addTest
	 * (Lroops/core/testingCoverage/core/BinTreeRemove;I)V: I6 Branch 2 IFEQ
	 * L25 - false 6 roops.core.testingCoverage.core.BinTreeRemove.repOK()Z:
	 * I4 Branch 27 IFNULL L275 - false 7
	 * roops.core.testingCoverage.core.BinTreeRemove.repOK()Z: I9 Branch 28
	 * IFNE L277 - true 8
	 * roops.core.testingCoverage.core.BinTreeRemove.repOK()Z: I20 Branch 29
	 * IFNE L281 - false 9
	 * roops.core.testingCoverage.core.BinTreeRemove.removeTest
	 * (Lroops/core/testingCoverage
	 * /core/BinTreeRemove;Lroops/core/testingCoverage/base/BinTreeNode;)V: I5
	 * Branch 6 IFNULL L41 - false 10
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .removeTest(Lroops/core/testingCoverage
	 * /core/BinTreeRemove;Lroops/core/testingCoverage/base/BinTreeNode;)V: I8
	 * Branch 7 IFEQ L41 - true 11
	 * roops.core.testingCoverage.core.BinTreeRemove.repOK_isAcyclic()Z: I46
	 * Branch 36 IFNULL L323 - true 12
	 * roops.core.testingCoverage.core.BinTreeRemove.repOK_isAcyclic()Z: I76
	 * Branch 38 IFNULL L332 - true 13
	 * roops.core.testingCoverage.core.BinTreeRemove.repOK_isAcyclic()Z: I106
	 * Branch 40 IFEQ L320 - true 14
	 * roops.core.testingCoverage.core.BinTreeRemove.repOK_isAcyclic()Z: I106
	 * Branch 40 IFEQ L320 - false 15
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .repOK_isOrderedMax(Lroops/core/testingCoverage/base/BinTreeNode;)I: I16
	 * Branch 48 IFNONNULL L376 - false 16
	 * roops.core.testingCoverage.core.BinTreeRemove.add(I)V: I9 Branch 8
	 * IFNONNULL L51 - false 17
	 * roops.core.testingCoverage.core.BinTreeRemove.repOK_isOrdered
	 * (Lroops/core/testingCoverage/base/BinTreeNode;II)Z: I5 Branch 41
	 * IF_ICMPLE L352 - true
	 */

	@Test
	public void test06() throws Throwable {
		BinTreeRemove binTree0 = new BinTreeRemove();
		BinTreeRemove.addTest(binTree0, (-2044));
		BinTreeRemove.removeTest(binTree0, binTree0.root);
		TestCoverageTool.pathReport(binTree0);
	}

	// Test case number: 7
	/*
	 * 2 covered goals: 1
	 * roops.core.testingCoverage.core.BinTreeRemove.removeTest
	 * (Lroops/core/testingCoverage
	 * /core/BinTreeRemove;Lroops/core/testingCoverage/base/BinTreeNode;)V: I3
	 * Branch 5 IFNULL L41 - false 2
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .removeTest(Lroops/core/testingCoverage
	 * /core/BinTreeRemove;Lroops/core/testingCoverage/base/BinTreeNode;)V: I5
	 * Branch 6 IFNULL L41 - true
	 */

	@Test
	public void test07() throws Throwable {
		BinTreeRemove binTree0 = new BinTreeRemove();
		BinTreeRemove.removeTest(binTree0, binTree0.root);
		TestCoverageTool.pathReport(binTree0);
	}

	// Test case number: 8
	/*
	 * 1 covered goal: 1
	 * roops.core.testingCoverage.core.BinTreeRemove.removeTest
	 * (Lroops/core/testingCoverage
	 * /core/BinTreeRemove;Lroops/core/testingCoverage/base/BinTreeNode;)V: I3
	 * Branch 5 IFNULL L41 - true
	 */

	@Test
	public void test08() throws Throwable {
		BinTreeRemove binTree0 = new BinTreeRemove();
		BinTreeRemove.removeTest((BinTreeRemove) null, binTree0.root);
		TestCoverageTool.pathReport(binTree0);
	}

	// Test case number: 9
	/*
	 * 5 covered goals: 1
	 * roops.core.testingCoverage.core.BinTreeRemove.<init>()V: root-Branch 2
	 * roops.core.testingCoverage.core.BinTreeRemove.repOK()Z: I4 Branch 27
	 * IFNULL L275 - true 3
	 * roops.core.testingCoverage.core.BinTreeRemove.contains(I)Z: I60 Branch
	 * 15 IFNONNULL L122 - false 4
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .containsTest(Lroops/core/testingCoverage/core/BinTreeRemove;I)V: I3
	 * Branch 3 IFNULL L33 - false 5
	 * roops.core.testingCoverage.core.BinTreeRemove
	 * .containsTest(Lroops/core/testingCoverage/core/BinTreeRemove;I)V: I6
	 * Branch 4 IFEQ L33 - false
	 */

	@Test
	public void test09() throws Throwable {
		BinTreeRemove binTree0 = new BinTreeRemove();
		BinTreeRemove.containsTest(binTree0, 0);
		TestCoverageTool.pathReport(binTree0);
	}

	// Test case number: 10
	/*
	 * 1 covered goal: 1
	 * roops.core.testingCoverage.core.BinTreeRemove.containsTest
	 * (Lroops/core/testingCoverage/core/BinTreeRemove;I)V: I3 Branch 3 IFNULL
	 * L33 - true
	 */

	@Test
	public void test10() throws Throwable {
		BinTreeRemove.containsTest((BinTreeRemove) null, 1555);
	}

	// Test case number: 11
	/*
	 * 1 covered goal: 1
	 * roops.core.testingCoverage.core.BinTreeRemove.addTest(
	 * Lroops/core/testingCoverage/core/BinTreeRemove;I)V: I3 Branch 1 IFNULL
	 * L25 - true
	 */

	@Test
	public void test11() throws Throwable {
		BinTreeRemove.addTest((BinTreeRemove) null, 1555);
	}
}
