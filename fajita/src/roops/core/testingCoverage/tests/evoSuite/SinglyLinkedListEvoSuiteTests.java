/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 31 20:28:25 ART 2014
 */

package roops.core.testingCoverage.tests.evoSuite;

import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.fail;

import org.junit.Test;

import roops.core.testingCoverage.path.SinglyLinkedListRemove;
import ar.uba.dc.rfm.tools.TestCoverageTool;

public class SinglyLinkedListEvoSuiteTests {


  //Test case number: 0
  /*
   * 1 covered goal:
   * 1 roops.core.testingCoverage.core.SinglyLinkedListRemove.insertBack(I)V: I46 Branch 18 IFNONNULL L107 - true
   */

  @Test
  public void test00()  throws Throwable  {
      SinglyLinkedListRemove singlyLinkedList0 = new SinglyLinkedListRemove();
      SinglyLinkedListRemove.insertBackTest(singlyLinkedList0, (-696));
      SinglyLinkedListRemove.insertBackTest(singlyLinkedList0, (-696));
      SinglyLinkedListRemove.insertBackTest(singlyLinkedList0, 1702);
  TestCoverageTool.pathReport(singlyLinkedList0);}

  //Test case number: 1
  /*
   * 3 covered goals:
   * 1 roops.core.testingCoverage.core.SinglyLinkedListRemove.remove(I)V: I73 Branch 16 IFNONNULL L90 - true
   * 2 roops.core.testingCoverage.core.SinglyLinkedListRemove.insertBack(I)V: I20 Branch 17 IFNONNULL L102 - true
   * 3 roops.core.testingCoverage.core.SinglyLinkedListRemove.insertBack(I)V: I46 Branch 18 IFNONNULL L107 - false
   */

  @Test
  public void test01()  throws Throwable  {
      SinglyLinkedListRemove singlyLinkedList0 = new SinglyLinkedListRemove();
      SinglyLinkedListRemove.insertBackTest(singlyLinkedList0, (-696));
      SinglyLinkedListRemove.insertBackTest(singlyLinkedList0, (-696));
      SinglyLinkedListRemove.removeTest(singlyLinkedList0, 1);
  TestCoverageTool.pathReport(singlyLinkedList0);}

  //Test case number: 2
  /*
   * 3 covered goals:
   * 1 roops.core.testingCoverage.core.SinglyLinkedListRemove.remove(I)V: I34 Branch 12 IF_ICMPNE L77 - true
   * 2 roops.core.testingCoverage.core.SinglyLinkedListRemove.remove(I)V: I59 Branch 14 IFNONNULL L75 - false
   * 3 roops.core.testingCoverage.core.SinglyLinkedListRemove.remove(I)V: I63 Branch 15 IFNE L86 - false
   */

  @Test
  public void test02()  throws Throwable  {
      SinglyLinkedListRemove singlyLinkedList0 = new SinglyLinkedListRemove();
      SinglyLinkedListRemove.insertBackTest(singlyLinkedList0, (-696));
      // Undeclared exception!
      try {
        SinglyLinkedListRemove.removeTest(singlyLinkedList0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  TestCoverageTool.pathReport(singlyLinkedList0);}

  //Test case number: 3
  /*
   * 7 covered goals:
   * 1 roops.core.testingCoverage.core.SinglyLinkedListRemove.remove(I)V: I3 Branch 11 IFGE L62 - true
   * 2 roops.core.testingCoverage.core.SinglyLinkedListRemove.remove(I)V: I34 Branch 12 IF_ICMPNE L77 - false
   * 3 roops.core.testingCoverage.core.SinglyLinkedListRemove.remove(I)V: I57 Branch 13 IFNE L75 - true
   * 4 roops.core.testingCoverage.core.SinglyLinkedListRemove.remove(I)V: I57 Branch 13 IFNE L75 - false
   * 5 roops.core.testingCoverage.core.SinglyLinkedListRemove.remove(I)V: I59 Branch 14 IFNONNULL L75 - true
   * 6 roops.core.testingCoverage.core.SinglyLinkedListRemove.remove(I)V: I63 Branch 15 IFNE L86 - true
   * 7 roops.core.testingCoverage.core.SinglyLinkedListRemove.remove(I)V: I73 Branch 16 IFNONNULL L90 - false
   */

  @Test
  public void test03()  throws Throwable  {
      SinglyLinkedListRemove singlyLinkedList0 = new SinglyLinkedListRemove();
      SinglyLinkedListRemove.insertBackTest(singlyLinkedList0, 0);
      SinglyLinkedListRemove.removeTest(singlyLinkedList0, 0);
  TestCoverageTool.pathReport(singlyLinkedList0);}

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 roops.core.testingCoverage.core.SinglyLinkedListRemove.contains(I)Z: I17 Branch 7 IF_ICMPNE L47 - true
   * 2 roops.core.testingCoverage.core.SinglyLinkedListRemove.contains(I)Z: I32 Branch 8 IFEQ L52 - true
   * 3 roops.core.testingCoverage.core.SinglyLinkedListRemove.contains(I)Z: I47 Branch 10 IFNONNULL L45 - false
   */

  @Test
  public void test04()  throws Throwable  {
      SinglyLinkedListRemove singlyLinkedList0 = new SinglyLinkedListRemove();
      SinglyLinkedListRemove.insertBackTest(singlyLinkedList0, 0);
      SinglyLinkedListRemove.containsTest(singlyLinkedList0, (-1895));
  TestCoverageTool.pathReport(singlyLinkedList0);}

  //Test case number: 5
  /*
   * 6 covered goals:
   * 1 roops.core.testingCoverage.core.SinglyLinkedListRemove.contains(I)Z: I17 Branch 7 IF_ICMPNE L47 - false
   * 2 roops.core.testingCoverage.core.SinglyLinkedListRemove.contains(I)Z: I32 Branch 8 IFEQ L52 - false
   * 3 roops.core.testingCoverage.core.SinglyLinkedListRemove.contains(I)Z: I45 Branch 9 IFNE L45 - true
   * 4 roops.core.testingCoverage.core.SinglyLinkedListRemove.contains(I)Z: I45 Branch 9 IFNE L45 - false
   * 5 roops.core.testingCoverage.core.SinglyLinkedListRemove.contains(I)Z: I47 Branch 10 IFNONNULL L45 - true
   * 6 roops.core.testingCoverage.core.SinglyLinkedListRemove.containsTest(Lroops/core/testingCoverage/core/SinglyLinkedListRemove;I)V: I6 Branch 2 IFEQ L17 - false
   */

  @Test
  public void test05()  throws Throwable  {
      SinglyLinkedListRemove singlyLinkedList0 = new SinglyLinkedListRemove();
      SinglyLinkedListRemove.insertBackTest(singlyLinkedList0, 1);
      SinglyLinkedListRemove.containsTest(singlyLinkedList0, 1);
  TestCoverageTool.pathReport(singlyLinkedList0);}

  //Test case number: 6
  /*
   * 1 covered goal:
   * 1 roops.core.testingCoverage.core.SinglyLinkedListRemove.removeTest(Lroops/core/testingCoverage/core/SinglyLinkedListRemove;I)V: I6 Branch 6 IFEQ L33 - true
   */

  @Test
  public void test06()  throws Throwable  {
      SinglyLinkedListRemove singlyLinkedList0 = new SinglyLinkedListRemove();
      SinglyLinkedListRemove.insertBackTest(singlyLinkedList0, (-696));
      SinglyLinkedListRemove singlyLinkedList1 = new SinglyLinkedListRemove();
      singlyLinkedList1.header = singlyLinkedList0.header;
      singlyLinkedList1.header.next = singlyLinkedList1.header;
      SinglyLinkedListRemove.removeTest(singlyLinkedList1, 0);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
  TestCoverageTool.pathReport(singlyLinkedList0);TestCoverageTool.pathReport(singlyLinkedList1);}

  //Test case number: 7
  /*
   * 3 covered goals:
   * 1 roops.core.testingCoverage.core.SinglyLinkedListRemove.remove(I)V: I3 Branch 11 IFGE L62 - false
   * 2 roops.core.testingCoverage.core.SinglyLinkedListRemove.removeTest(Lroops/core/testingCoverage/core/SinglyLinkedListRemove;I)V: I3 Branch 5 IFNULL L33 - false
   * 3 roops.core.testingCoverage.core.SinglyLinkedListRemove.removeTest(Lroops/core/testingCoverage/core/SinglyLinkedListRemove;I)V: I6 Branch 6 IFEQ L33 - false
   */

  @Test
  public void test07()  throws Throwable  {
      SinglyLinkedListRemove singlyLinkedList0 = new SinglyLinkedListRemove();
      // Undeclared exception!
      try {
        SinglyLinkedListRemove.removeTest(singlyLinkedList0, (-1833));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  TestCoverageTool.pathReport(singlyLinkedList0);}

  //Test case number: 8
  /*
   * 1 covered goal:
   * 1 roops.core.testingCoverage.core.SinglyLinkedListRemove.removeTest(Lroops/core/testingCoverage/core/SinglyLinkedListRemove;I)V: I3 Branch 5 IFNULL L33 - true
   */

  @Test
  public void test08()  throws Throwable  {
      SinglyLinkedListRemove.removeTest((SinglyLinkedListRemove) null, (-3));
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 roops.core.testingCoverage.core.SinglyLinkedListRemove.insertBackTest(Lroops/core/testingCoverage/core/SinglyLinkedListRemove;I)V: I6 Branch 4 IFEQ L25 - true
   */

  @Test
  public void test09()  throws Throwable  {
      SinglyLinkedListRemove singlyLinkedList0 = new SinglyLinkedListRemove();
      SinglyLinkedListRemove.insertBackTest(singlyLinkedList0, (-696));
      SinglyLinkedListRemove singlyLinkedList1 = new SinglyLinkedListRemove();
      singlyLinkedList1.header = singlyLinkedList0.header;
      singlyLinkedList1.header.next = singlyLinkedList1.header;
      SinglyLinkedListRemove.insertBackTest(singlyLinkedList0, 0);
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
  TestCoverageTool.pathReport(singlyLinkedList0);
  TestCoverageTool.pathReport(singlyLinkedList1);}

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 roops.core.testingCoverage.core.SinglyLinkedListRemove.insertBackTest(Lroops/core/testingCoverage/core/SinglyLinkedListRemove;I)V: I3 Branch 3 IFNULL L25 - true
   */

  @Test
  public void test10()  throws Throwable  {
      SinglyLinkedListRemove.insertBackTest((SinglyLinkedListRemove) null, 0);
  }

  //Test case number: 11
  /*
   * 10 covered goals:
   * 1 roops.core.testingCoverage.core.SinglyLinkedListRemove.<init>()V: root-Branch
   * 2 roops.core.testingCoverage.core.SinglyLinkedListRemove.repOK()Z: I18 Branch 19 IFNONNULL L129 - true
   * 3 roops.core.testingCoverage.core.SinglyLinkedListRemove.repOK()Z: I18 Branch 19 IFNONNULL L129 - false
   * 4 roops.core.testingCoverage.core.SinglyLinkedListRemove.repOK()Z: I27 Branch 20 IFNE L132 - true
   * 5 roops.core.testingCoverage.core.SinglyLinkedListRemove.repOK()Z: I27 Branch 20 IFNE L132 - false
   * 6 roops.core.testingCoverage.core.SinglyLinkedListRemove.insertBackTest(Lroops/core/testingCoverage/core/SinglyLinkedListRemove;I)V: I3 Branch 3 IFNULL L25 - false
   * 7 roops.core.testingCoverage.core.SinglyLinkedListRemove.insertBackTest(Lroops/core/testingCoverage/core/SinglyLinkedListRemove;I)V: I6 Branch 4 IFEQ L25 - false
   * 8 roops.core.testingCoverage.core.SinglyLinkedListRemove.insertBack(I)V: I20 Branch 17 IFNONNULL L102 - false
   * 9 roops.core.testingCoverage.core.SinglyLinkedListRemove.containsTest(Lroops/core/testingCoverage/core/SinglyLinkedListRemove;I)V: I3 Branch 1 IFNULL L17 - false
   * 10 roops.core.testingCoverage.core.SinglyLinkedListRemove.containsTest(Lroops/core/testingCoverage/core/SinglyLinkedListRemove;I)V: I6 Branch 2 IFEQ L17 - true
   */

  @Test
  public void test11()  throws Throwable  {
      SinglyLinkedListRemove singlyLinkedList0 = new SinglyLinkedListRemove();
      SinglyLinkedListRemove.insertBackTest(singlyLinkedList0, (-696));
      SinglyLinkedListRemove singlyLinkedList1 = new SinglyLinkedListRemove();
      singlyLinkedList1.header = singlyLinkedList0.header;
      singlyLinkedList1.header.next = singlyLinkedList1.header;
      SinglyLinkedListRemove.containsTest(singlyLinkedList1, 0);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
  TestCoverageTool.pathReport(singlyLinkedList0);TestCoverageTool.pathReport(singlyLinkedList1);}

  //Test case number: 12
  /*
   * 1 covered goal:
   * 1 roops.core.testingCoverage.core.SinglyLinkedListRemove.containsTest(Lroops/core/testingCoverage/core/SinglyLinkedListRemove;I)V: I3 Branch 1 IFNULL L17 - true
   */

  @Test
  public void test12()  throws Throwable  {
      SinglyLinkedListRemove.containsTest((SinglyLinkedListRemove) null, 3);
  }
}
